* Actions and Ideas

** Photometric bands

*** Optical/IR
in microns
| name | central | width |   lmin |   lmax |
|------+---------+-------+--------+--------|
| U    |   0.365 | 0.066 |  0.332 |  0.398 |
|------+---------+-------+--------+--------|
| B    |   0.445 | 0.094 |  0.398 |  0.492 |
| G    |   0.464 | 0.128 |  0.400 |  0.528 |
| V    |   0.551 | 0.088 |  0.507 |  0.595 |
| R    |   0.658 | 0.138 |  0.589 |  0.727 |
| I    |   0.806 | 0.149 |  0.732 |  0.880 |
|------+---------+-------+--------+--------|
| Z    |   0.900 |       |  0.900 |  0.900 |
| Y    |   1.020 | 0.120 |  0.960 |  1.080 |
| J    |   1.220 | 0.213 |  1.113 |  1.327 |
| H    |   1.630 | 0.307 |  1.476 |  1.784 |
| K    |   2.190 | 0.390 |  1.995 |  2.385 |
| L    |   3.450 | 0.472 |  3.214 |  3.686 |
|------+---------+-------+--------+--------|
| M    |   4.750 | 0.460 |  4.520 |  4.980 |
| N    |  10.500 | 2.500 |  9.250 | 11.750 |
| Q    |  21.000 |       | 21.000 | 21.000 |
#+TBLFM: $4=$2-($3/2.);%.3f::$5=$2+($3/2.);%.3f

*** ALMA

| Band    | lmin | lmax | numin | numax |  lmin |  lmax |  mean |
|         |   mm |   mm |   GHz |   GHz |       |       |       |
|---------+------+------+-------+-------+-------+-------+-------|
| ALMA 1  | 8.57 | 6.00 |    35 |    50 | 8570. | 6000. | 7285. |
| ALMA 2  | 4.48 | 3.33 |    67 |    90 | 4480. | 3330. | 3905. |
| ALMA 3  | 3.57 | 2.59 |    84 |   116 | 3570. | 2590. | 3080. |
| ALMA 4  | 2.40 | 1.84 |   125 |   163 | 2400. | 1840. | 2120. |
| ALMA 5  | 1.84 | 1.42 |   163 |   211 | 1840. | 1420. | 1630. |
| ALMA 6  | 1.42 | 1.09 |   211 |   275 | 1420. | 1090. | 1255. |
| ALMA 7  | 1.09 | 0.80 |   275 |   373 | 1090. |  800. |  945. |
| ALMA 8  | 0.78 | 0.60 |   385 |   500 |  780. |  600. |  690. |
| ALMA 9  | 0.50 | 0.42 |   602 |   720 |  500. |  420. |  460. |
| ALMA 10 | 0.38 | 0.32 |   787 |   950 |  380. |  320. |  350. |
#+TBLFM: $6=$2*1000::$7=$3*1000::$8=0.5*($6+$7)

** TODO Fix the FITS issues
Python cannot read the headers.  I should check if Fortran actually can!?
*** TODO propagate rho to fits and write it there?
** DONE Add an amorphous water ice
* Undocumented features
** Tools
+ =-b= :: Just interpolate and extrapolate the refractive index data
  onto the lambda grid, run the blender, and write the resulting
  refractive index to the file =blended.lnk=.  This gives access to
  the blending routines in =optool=.  For example, if you have
  laboratory measurments of a crystalline material, one file with
  measurements parallel to the c axis, and one with measurement
  perperndicular to it, you could create refractive index data for a
  1:2 mix of these materials like this:
  : optool -b para.lnk 1 perp.lnk 2 -l para.lnk
+ =-tex= :: Run =optool2tex= as part of the optool run.

