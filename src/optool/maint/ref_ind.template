! -*- mode:f90 -*-

subroutine ListBuiltinMaterials()
  use IOunits
HELPBLOCK
end subroutine ListBuiltinMaterials

subroutine GetAndRegridLNK(input,grid,e1,e2,n,loglog,rho)
  use Defs
  use IOunits
  implicit none
  integer, parameter :: nmax = 100000 ! for allocation of lnk arrays
  real (kind=dp) :: grid(n)
  real (kind=dp) :: e1(n),e2(n),x0,y01,y02,x1,y11,y12,wp,gamma
  real (kind=dp) :: rho,rho_in
  real (kind=dp) :: slope1,sect1,slope2,sect2,dist,temp
  real (kind=dp) :: lgy11,lgy12,lgy01,lgy02,lgx0,lgx1,lggr
  integer i,j,n, iup,idown, iostatus, count_numbers, count_data_lines

  character*100 input
  character*500 line
  real (KIND=dp),allocatable :: x(:),y1(:),y2(:)
  integer n0,i0,nn,nd
  logical loglog
  COMPLEX (KIND=dp) :: m,m0

  EXTERNAL_DEFS
  
  allocate(x(nmax))
  allocate(y1(nmax))
  allocate(y2(nmax))

  ! Check if INPUT is a built-in dataset
  select case(trim(input))
     CASE_DEFS
  case default
     ! read data from file
     rho_in = rho
     call require_file(input)
     nd = count_data_lines(input)
     open(99,file=input)
     n0 = 0
1    continue
     read(99,'(A)') line
     line = trim(adjustl(line))
     ! Skip commented lines at the beginning of the file
     if (line(1:1).eq.'#' .or. line(1:1).eq.'!' .or. line(1:1).eq.'*') goto 1
     nn = count_numbers(line)
     if (nn.ne.2) then
        ! Oops, the NLAM RHO line is not there.
        if (rho_in > 0d0) then
           ! The user gave rho on the command line, so we can recover using the line count
           rho = rho_in
           n0  = nd-1
        else
           ! No way to recover, error out.
           write(stde,'("ERROR: no line with NLAM and RHO values in lnk file: ",A)') trim(input)
           write(stde,'("Or maybe this is not even an lnk file?")')
           write(stde,'("This is the relevant line: ",A)') trim(line)
           write(stde,'("The line seems to contain ",I3," numbers to read, but should have 2.")') nn
           write(stde,'("If you do not want to edit the file, specify rho on the")')
           write(stde,'("command line like this:  -c path/to/file.lnk MFRAC RHO")')
           stop
        endif
     else
        read(line,*) n0, rho
     endif
     if (n0 .ne. nd-1) then
        write(stde,*) "ERROR: NLAM in file does not match the number of data lines"
        write(stde,*) "file: ", trim(input),";    NLAM=",n0,";    Ndata=",nd-1
        stop
     endif
     do i=1, n0
        read (99, fmt=* ) x(i), y1(i), y2(i)
     end do
     close(99)

     ! Check if we need to reverse the arrays
     if (x(n0) .lt. x(1)) then
        if (.not. quiet) write(stde,*) "WARNING: reversing input from file ",input
        iup = 1; idown = n0
        do
           if (iup >= idown) exit
           temp = x(iup);  x(iup)  = x(idown);  x(idown)  = temp
           temp = y1(iup); y1(iup) = y2(idown); y1(idown) = temp
           temp = y2(iup); y2(iup) = y2(idown); y2(idown) = temp
           iup = iup+1; idown = idown-1
        enddo
     endif
  end select

  ! Do not allow values <= 0, those would be poison for the loglog interpolation
  do i=1,n0
     if (y1(i).le.0.d0) y1(i) = 1d-10
     if (y2(i).le.0.d0) y2(i) = 1d-10
  enddo
  
  i   = 1
  i0  = 1
  x0  = x(i0)
  y01 = y1(i0)
  y02 = y2(i0)
  wp  = (1d0-y01)/x0**2
  gamma = y02/x0**3

  ! ------------------------------------------------------------------
  ! The first block is space in the grid that is before the first
  ! specified wavelength. Simple extrapolation: keep same value
  ! ------------------------------------------------------------------
5 if(x0.ge.grid(i)) then
     e1(i) = 1d0-wp*grid(i)**2
     e2(i) = gamma*grid(i)**3
     e1(i) = y01
     e2(i) = y02
     i = i+1
     if (i.gt.n) goto 9 ! All requested lambda are before first data point
     goto 5
  endif
  
2 i0 = i0+1
  if(i0.gt.n0) goto 4
  x1  = x(i0)
  y11 = y1(i0)
  y12 = y2(i0)
3 if(grid(i).le.x1.and.grid(i).gt.x0) then
     ! loglog interpolation betwwen points

     lgy11 = log10(y11); lgy12 = log10(y12)
     lgy01 = log10(y01); lgy02 = log10(y02)
     lgx0  = log10(x0) ; lgx1  = log10(x1)
     lggr  = log10(grid(i))
     
     e1(i) = 10.d0**(lgy11 + (lggr-lgx1)*(lgy01-lgy11)/(lgx0-lgx1))
     e2(i) = 10.d0**(lgy12 + (lggr-lgx1)*(lgy02-lgy12)/(lgx0-lgx1))

     i = i+1
     if(i.gt.n) goto 4
     goto 3
  endif
  x0  = x1
  y01 = y11
  y02 = y12
  goto 2
4 continue

  ! ------------------------------------------------------------------
  ! Extrapolation to long wavelengths
  ! ------------------------------------------------------------------
  if(loglog) then
     m0 = dcmplx(e1(i-1),e2(i-1))
     if(abs(m0).gt.2d0 .and. .false.) then
        !                    ^^^^^^^
        ! don't use the conducting extrapolation since it is not very accurate
        do j=i,n
           m = m0 * sqrt(grid(j)/grid(i-1))
           e1(j) = real(m)
           e2(j) = dimag(m)
        enddo
     else
        ! use loglog extrapolation
        slope1 = log10(y1(n0)/y1(n0-1)) / log10(x(n0)/x(n0-1))
        sect1  = log10(y1(n0-1))
        slope2 = log10(y2(n0)/y2(n0-1)) / log10(x(n0)/x(n0-1))
        sect2  = log10(y2(n0-1))
        do j=i,n
           dist  = log10(grid(j)/x(n0-1))
           e1(j) = 10d0**(slope1*dist + sect1)
           e2(j) = 10d0**(slope2*dist + sect2)
        enddo
     endif
  else
     ! use the dielectric extrapolation, this is the default
     do j=i,n
        e1(j) = e1(i-1)
        e2(j) = e2(i-1)*grid(i-1)/grid(j)
     enddo
  endif

9 continue
  
  deallocate(x,y1,y2)
  
  return
end subroutine GetAndRegridLNK

function is_key_or_file (name,or_file)
  implicit none
  character*(*) name
  logical is_key_or_file,or_file
  logical file_exists
  is_key_or_file = .false.
  inquire (file=trim(name),exist=file_exists)
  if (or_file .and. file_exists) then
     is_key_or_file = .true.
KEYCHECKBLOCK
  endif
end function is_key_or_file

